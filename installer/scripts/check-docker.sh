#!/bin/bash
# =============================================================================
# –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è Docker
# =============================================================================
# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è Docker Engine, –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∏ –æ–±—Ä–∞–∑–æ–≤
# –ê–≤—Ç–æ—Ä: –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ Monq
# –í–µ—Ä—Å–∏—è: 1.0.0
# =============================================================================

# –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$SCRIPT_DIR/common.sh"

# =============================================================================
# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç–∞
# =============================================================================

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
OUTPUT_FORMAT="text"  # text, json
VERBOSE=false
DRY_RUN=false

# –§—É–Ω–∫—Ü–∏–∏ —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∏–∑ common.sh

# =============================================================================
# –§—É–Ω–∫—Ü–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞
# =============================================================================

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∫–∏
show_help() {
    cat << EOF
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–û–ü–¶–ò–ò]

–û–ø—Ü–∏–∏:
    --format FORMAT       –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ (text|json, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: text)
    --verbose            –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥
    --dry-run            –†–µ–∂–∏–º —Å–∏–º—É–ª—è—Ü–∏–∏
    --help               –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
    $0 --format json
    $0 --verbose

EOF
}

# –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
parse_arguments() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            --format)
                OUTPUT_FORMAT="$2"
                shift 2
                ;;
            --verbose)
                VERBOSE=true
                shift
                ;;
            --dry-run)
                DRY_RUN=true
                shift
                ;;
            --help)
                show_help
                exit 0
                ;;
            *)
                log_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: $1"
                show_help
                exit 1
                ;;
        esac
    done
}

# –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
validate_parameters() {
    if [[ "$OUTPUT_FORMAT" != "text" && "$OUTPUT_FORMAT" != "json" ]]; then
        log_error "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞: $OUTPUT_FORMAT (–¥–æ–ø—É—Å—Ç–∏–º–æ: text, json)"
        exit 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Docker
check_docker_version() {
    local docker_version=""
    local docker_compose_version=""
    
    if command -v docker &>/dev/null; then
        docker_version=$(docker --version 2>/dev/null | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' | head -1)
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker Compose (–ø–ª–∞–≥–∏–Ω)
    if command -v docker &>/dev/null; then
        docker_compose_version=$(docker compose version 2>/dev/null | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' | head -1)
    fi
    
    # –ï—Å–ª–∏ –ø–ª–∞–≥–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é –∫–æ–º–∞–Ω–¥—É docker-compose
    if [[ -z "$docker_compose_version" ]] && command -v docker-compose &>/dev/null; then
        docker_compose_version=$(docker-compose --version 2>/dev/null | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' | head -1)
    fi
    
    if [[ "$OUTPUT_FORMAT" == "json" ]]; then
        echo "    \"docker_version\": \"$docker_version\","
        echo "    \"docker_compose_version\": \"$docker_compose_version\","
    else
        print_section "–í–µ—Ä—Å–∏–∏ Docker:"
        print_info "Docker: $docker_version"
        if [[ -n "$docker_compose_version" ]]; then
            print_info "Docker Compose: $docker_compose_version"
        else
            print_warning "Docker Compose: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        fi
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Docker daemon
check_docker_daemon() {
    local daemon_status=""
    local daemon_info=""
    
    if systemctl is-active docker &>/dev/null; then
        daemon_status="active"
        if command -v docker &>/dev/null; then
            daemon_info=$(docker info 2>/dev/null | head -20)
        fi
    else
        daemon_status="inactive"
    fi
    
    if [[ "$OUTPUT_FORMAT" == "json" ]]; then
        echo "    \"daemon_status\": \"$daemon_status\","
        echo "    \"daemon_info\": \"$daemon_info\","
    else
        print_section "Docker Daemon:"
        if [[ "$daemon_status" == "active" ]]; then
            print_success "–°—Ç–∞—Ç—É—Å: $daemon_status"
        else
            print_error "–°—Ç–∞—Ç—É—Å: $daemon_status"
        fi
        if [[ "$VERBOSE" == "true" && -n "$daemon_info" ]]; then
            print_info "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:"
            echo "$daemon_info" | sed 's/^/    /'
        fi
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
check_running_containers() {
    local running_containers=()
    local stopped_containers=()
    
    if command -v docker &>/dev/null && systemctl is-active docker &>/dev/null; then
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
        while IFS= read -r line; do
            if [[ -n "$line" ]]; then
                local container_id=$(echo "$line" | awk '{print $1}')
                local container_name=$(echo "$line" | awk '{print $2}')
                local container_status=$(echo "$line" | awk '{print $7}')
                
                if [[ "$container_status" == "Up" ]]; then
                    running_containers+=("$container_name ($container_id)")
                else
                    stopped_containers+=("$container_name ($container_id)")
                fi
            fi
        done < <(docker ps -a --format "table {{.ID}}\t{{.Names}}\t{{.Image}}\t{{.Status}}" 2>/dev/null | tail -n +2)
    fi
    
    if [[ "$OUTPUT_FORMAT" == "json" ]]; then
        echo "    \"containers\": {"
        echo "        \"running\": ["
        for container in "${running_containers[@]}"; do
            echo "            \"$container\","
        done
        echo "        ],"
        echo "        \"stopped\": ["
        for container in "${stopped_containers[@]}"; do
            echo "            \"$container\","
        done
        echo "        ]"
        echo "    },"
    else
        print_section "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:"
        print_info "–ó–∞–ø—É—â–µ–Ω–Ω—ã–µ: ${#running_containers[@]}"
        print_info "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ: ${#stopped_containers[@]}"
        
        if [[ "$VERBOSE" == "true" ]]; then
            if [[ ${#running_containers[@]} -gt 0 ]]; then
                print_info "–ó–∞–ø—É—â–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:"
                for container in "${running_containers[@]}"; do
                    print_success "  $container"
                done
            fi
            if [[ ${#stopped_containers[@]} -gt 0 ]]; then
                print_info "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:"
                for container in "${stopped_containers[@]}"; do
                    print_error "  $container"
                done
            fi
        fi
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤ Docker
check_docker_images() {
    local images=()
    local total_size=""
    
    if command -v docker &>/dev/null && systemctl is-active docker &>/dev/null; then
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–±—Ä–∞–∑–æ–≤
        while IFS= read -r line; do
            if [[ -n "$line" ]]; then
                local image_name=$(echo "$line" | awk '{print $1}')
                local image_tag=$(echo "$line" | awk '{print $2}')
                local image_size=$(echo "$line" | awk '{print $7}')
                images+=("$image_name:$image_tag ($image_size)")
            fi
        done < <(docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.ID}}\t{{.CreatedAt}}\t{{.Size}}" 2>/dev/null | tail -n +2)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        total_size=$(docker system df 2>/dev/null | grep "Images" | awk '{print $3}' || echo "unknown")
    fi
    
    if [[ "$OUTPUT_FORMAT" == "json" ]]; then
        echo "    \"images\": {"
        echo "        \"count\": ${#images[@]},"
        echo "        \"total_size\": \"$total_size\","
        echo "        \"list\": ["
        for image in "${images[@]}"; do
            echo "            \"$image\","
        done
        echo "        ]"
        echo "    },"
    else
        print_section "–û–±—Ä–∞–∑—ã Docker:"
        print_info "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${#images[@]}"
        print_info "–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: $total_size"
        
        if [[ "$VERBOSE" == "true" && ${#images[@]} -gt 0 ]]; then
            print_info "–°–ø–∏—Å–æ–∫ –æ–±—Ä–∞–∑–æ–≤:"
            for image in "${images[@]}"; do
                print_success "  üì¶ $image"
            done
        fi
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–π Docker
check_docker_networks() {
    local networks=()
    
    if command -v docker &>/dev/null && systemctl is-active docker &>/dev/null; then
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–µ—Ç–µ–π
        while IFS= read -r line; do
            if [[ -n "$line" ]]; then
                local network_name=$(echo "$line" | awk '{print $2}')
                local network_driver=$(echo "$line" | awk '{print $3}')
                local network_scope=$(echo "$line" | awk '{print $4}')
                networks+=("$network_name ($network_driver, $network_scope)")
            fi
        done < <(docker network ls --format "table {{.ID}}\t{{.Name}}\t{{.Driver}}\t{{.Scope}}" 2>/dev/null | tail -n +2)
    fi
    
    if [[ "$OUTPUT_FORMAT" == "json" ]]; then
        echo "    \"networks\": {"
        echo "        \"count\": ${#networks[@]},"
        echo "        \"list\": ["
        for network in "${networks[@]}"; do
            echo "            \"$network\","
        done
        echo "        ]"
        echo "    },"
    else
        print_section "–°–µ—Ç–∏ Docker:"
        print_info "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${#networks[@]}"
        
        if [[ "$VERBOSE" == "true" && ${#networks[@]} -gt 0 ]]; then
            print_info "–°–ø–∏—Å–æ–∫ —Å–µ—Ç–µ–π:"
            for network in "${networks[@]}"; do
                print_success "  üåê $network"
            done
        fi
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–º–æ–≤ Docker
check_docker_volumes() {
    local volumes=()
    local total_size=""
    
    if command -v docker &>/dev/null && systemctl is-active docker &>/dev/null; then
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–º–æ–≤
        while IFS= read -r line; do
            if [[ -n "$line" ]]; then
                local volume_name=$(echo "$line" | awk '{print $2}')
                local volume_driver=$(echo "$line" | awk '{print $3}')
                volumes+=("$volume_name ($volume_driver)")
            fi
        done < <(docker volume ls --format "table {{.Driver}}\t{{.Name}}" 2>/dev/null | tail -n +2)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Ç–æ–º–æ–≤
        total_size=$(docker system df 2>/dev/null | grep "Local Volumes" | awk '{print $4}' || echo "unknown")
    fi
    
    if [[ "$OUTPUT_FORMAT" == "json" ]]; then
        echo "    \"volumes\": {"
        echo "        \"count\": ${#volumes[@]},"
        echo "        \"total_size\": \"$total_size\","
        echo "        \"list\": ["
        for volume in "${volumes[@]}"; do
            echo "            \"$volume\","
        done
        echo "        ]"
        echo "    },"
    else
        print_section "–¢–æ–º–∞ Docker:"
        print_info "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${#volumes[@]}"
        print_info "–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: $total_size"
        
        if [[ "$VERBOSE" == "true" && ${#volumes[@]} -gt 0 ]]; then
            print_info "–°–ø–∏—Å–æ–∫ —Ç–æ–º–æ–≤:"
            for volume in "${volumes[@]}"; do
                print_success "  üíæ $volume"
            done
        fi
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ Docker
check_docker_resources() {
    local cpu_usage=""
    local memory_usage=""
    local disk_usage=""
    local running_containers=0
    
    if command -v docker &>/dev/null && systemctl is-active docker &>/dev/null; then
        # –ü–æ–¥—Å—á–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
        running_containers=$(docker ps -q 2>/dev/null | wc -l)
        
        if [[ $running_containers -gt 0 ]]; then
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
            local stats=$(docker stats --no-stream --format "{{.CPUPerc}}\t{{.MemPerc}}" 2>/dev/null)
            
            if [[ -n "$stats" ]]; then
                # –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª % –∏ —Å—É–º–º–∏—Ä—É–µ–º
                cpu_usage=$(echo "$stats" | awk '{gsub(/%/, "", $1); sum+=$1} END {printf "%.1f", sum}')
                memory_usage=$(echo "$stats" | awk '{gsub(/%/, "", $2); sum+=$2} END {printf "%.1f", sum}')
            fi
        else
            cpu_usage="0.0"
            memory_usage="0.0"
        fi
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∏—Å–∫–∞
        local disk_info=$(docker system df 2>/dev/null)
        if [[ -n "$disk_info" ]]; then
            # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –æ–±—â–∏–º —Ä–∞–∑–º–µ—Ä–æ–º
            disk_usage=$(echo "$disk_info" | grep -E "Images|Local Volumes|Build Cache" | awk '{sum+=$3} END {print sum}' || echo "0B")
            if [[ -z "$disk_usage" || "$disk_usage" == "0" ]]; then
                disk_usage="0B"
            fi
        else
            disk_usage="unknown"
        fi
    else
        cpu_usage="N/A"
        memory_usage="N/A"
        disk_usage="N/A"
    fi
    
    if [[ "$OUTPUT_FORMAT" == "json" ]]; then
        echo "    \"resources\": {"
        echo "        \"running_containers\": $running_containers,"
        echo "        \"cpu_usage_percent\": \"$cpu_usage\","
        echo "        \"memory_usage_percent\": \"$memory_usage\","
        echo "        \"disk_usage\": \"$disk_usage\""
        echo "    },"
    else
        print_section "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤:"
        print_info "–ó–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: $running_containers"
        if [[ "$cpu_usage" != "N/A" ]]; then
            print_info "CPU: ${cpu_usage}%"
            print_info "–ü–∞–º—è—Ç—å: ${memory_usage}%"
        else
            print_warning "CPU: $cpu_usage"
            print_warning "–ü–∞–º—è—Ç—å: $memory_usage"
        fi
        print_info "–î–∏—Å–∫: $disk_usage"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Docker
check_docker_config() {
    local config_file="/etc/docker/daemon.json"
    local config_exists="false"
    local config_content=""
    
    if [[ -f "$config_file" ]]; then
        config_exists="true"
        config_content=$(cat "$config_file" 2>/dev/null | head -10)
    fi
    
    if [[ "$OUTPUT_FORMAT" == "json" ]]; then
        echo "    \"config\": {"
        echo "        \"config_file_exists\": $config_exists,"
        echo "        \"config_file\": \"$config_file\","
        echo "        \"config_content\": \"$config_content\""
        echo "    },"
    else
        print_section "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Docker:"
        if [[ "$config_exists" == "true" ]]; then
            print_success "–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: $config_exists"
        else
            print_warning "–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: $config_exists"
        fi
        print_info "–ü—É—Ç—å: $config_file"
        
        if [[ "$VERBOSE" == "true" && -n "$config_content" ]]; then
            print_info "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:"
            echo "$config_content" | sed 's/^/    /'
        fi
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
check_user_permissions() {
    local user_in_docker_group="false"
    local can_run_docker="false"
    
    if groups "$MONQ_USER" 2>/dev/null | grep -q docker; then
        user_in_docker_group="true"
    fi
    
    if sudo -u "$MONQ_USER" docker info &>/dev/null 2>&1; then
        can_run_docker="true"
    fi
    
    if [[ "$OUTPUT_FORMAT" == "json" ]]; then
        echo "    \"user_permissions\": {"
        echo "        \"user_in_docker_group\": $user_in_docker_group,"
        echo "        \"can_run_docker\": $can_run_docker"
        echo "    },"
    else
        print_section "–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
        if [[ "$user_in_docker_group" == "true" ]]; then
            print_success "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $MONQ_USER –≤ –≥—Ä—É–ø–ø–µ docker: $user_in_docker_group"
        else
            print_warning "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $MONQ_USER –≤ –≥—Ä—É–ø–ø–µ docker: $user_in_docker_group"
        fi
        
        if [[ "$can_run_docker" == "true" ]]; then
            print_success "–ú–æ–∂–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å Docker: $can_run_docker"
        else
            print_warning "–ú–æ–∂–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å Docker: $can_run_docker"
        fi
        
        if [[ "$user_in_docker_group" == "false" ]]; then
            print_warning "  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –≥—Ä—É–ø–ø–µ docker"
        fi
        if [[ "$can_run_docker" == "false" ]]; then
            print_warning "  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å Docker –∫–æ–º–∞–Ω–¥—ã"
        fi
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ Docker
check_docker_services() {
    local docker_service=""
    local containerd_service=""
    
    if systemctl is-active docker &>/dev/null; then
        docker_service="active"
    else
        docker_service="inactive"
    fi
    
    if systemctl is-active containerd &>/dev/null; then
        containerd_service="active"
    else
        containerd_service="inactive"
    fi
    
    if [[ "$OUTPUT_FORMAT" == "json" ]]; then
        echo "    \"services\": {"
        echo "        \"docker\": \"$docker_service\","
        echo "        \"containerd\": \"$containerd_service\""
        echo "    }"
    else
        print_section "–°–µ—Ä–≤–∏—Å—ã Docker:"
        if [[ "$docker_service" == "active" ]]; then
            print_success "Docker: $docker_service"
        else
            print_error "Docker: $docker_service"
        fi
        
        if [[ "$containerd_service" == "active" ]]; then
            print_success "Containerd: $containerd_service"
        else
            print_error "Containerd: $containerd_service"
        fi
        
        if [[ "$docker_service" == "inactive" ]]; then
            print_warning "  Docker —Å–µ—Ä–≤–∏—Å –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω"
        fi
        if [[ "$containerd_service" == "inactive" ]]; then
            print_warning "  Containerd —Å–µ—Ä–≤–∏—Å –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω"
        fi
    fi
}

# =============================================================================
# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
# =============================================================================

main() {
    print_header "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è Docker"
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    parse_arguments "$@"
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    validate_parameters
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    local log_file="$LOG_DIR/check-docker-$(date +%Y%m%d_%H%M%S).log"
    init_logging "$log_file" "$LOG_LEVEL"
    
    log_info "–ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è Docker"
    log_info "–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞: $OUTPUT_FORMAT"
    log_info "–ü–æ–¥—Ä–æ–±–Ω—ã–π —Ä–µ–∂–∏–º: $VERBOSE"
    
    if [[ "$OUTPUT_FORMAT" == "json" ]]; then
        echo "{"
        echo "    \"timestamp\": \"$(date -Iseconds)\","
        echo "    \"hostname\": \"$(hostname)\","
    fi
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫
    local checks=(
        "check_docker_version"
        "check_docker_daemon"
        "check_running_containers"
        "check_docker_images"
        "check_docker_networks"
        "check_docker_volumes"
        "check_docker_resources"
        "check_docker_config"
        "check_user_permissions"
        "check_docker_services"
    )
    
    for check in "${checks[@]}"; do
        if [[ "$DRY_RUN" == "true" ]]; then
            log_info "[DRY-RUN] –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏: $check"
        else
            $check
        fi
    done
    
    if [[ "$OUTPUT_FORMAT" == "json" ]]; then
        echo "}"
    fi
    
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è Docker –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
    log_info "–õ–æ–≥ —Ñ–∞–π–ª: $log_file"
}

# =============================================================================
# –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
# =============================================================================

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
